const axios = require('axios');
const path = require('path');
const fs = require('fs').promises;
const os = require('os');
const pythonBridge = require('./pythonBridge');

// Zodiac signs in both English and Russian
const ZODIAC_SIGNS = {
  ARIES: { ru: '–û–≤–µ–Ω', en: 'ARIES' },
  TAURUS: { ru: '–¢–µ–ª–µ—Ü', en: 'TAURUS' },
  GEMINI: { ru: '–ë–ª–∏–∑–Ω–µ—Ü—ã', en: 'GEMINI' },
  CANCER: { ru: '–†–∞–∫', en: 'CANCER' },
  LEO: { ru: '–õ–µ–≤', en: 'LEO' },
  VIRGO: { ru: '–î–µ–≤–∞', en: 'VIRGO' },
  LIBRA: { ru: '–í–µ—Å—ã', en: 'LIBRA' },
  SCORPIO: { ru: '–°–∫–æ—Ä–ø–∏–æ–Ω', en: 'SCORPIO' },
  SAGITTARIUS: { ru: '–°—Ç—Ä–µ–ª–µ—Ü', en: 'SAGITTARIUS' },
  CAPRICORN: { ru: '–ö–æ–∑–µ—Ä–æ–≥', en: 'CAPRICORN' },
  AQUARIUS: { ru: '–í–æ–¥–æ–ª–µ–π', en: 'AQUARIUS' },
  PISCES: { ru: '–†—ã–±—ã', en: 'PISCES' }
};

class HoroscopeGenerator {
  constructor() {
    this.id = 'horoscope';
    this.name = '–ì–æ—Ä–æ—Å–∫–æ–ø';
    this.description = '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö';
    this.params = [
      {
        name: 'signSelection',
        label: '–í—ã–±–æ—Ä –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞',
        type: 'select',
        options: [
          { value: 'all', label: '–í—Å–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞' },
          { value: 'single', label: '–û–¥–∏–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞' },
          { value: 'multiple', label: '–ù–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞' }
        ],
        default: 'all'
      },
      {
        name: 'signs',
        label: '–ó–Ω–∞–∫(–∏) –∑–æ–¥–∏–∞–∫–∞',
        type: 'multiselect',
        options: Object.entries(ZODIAC_SIGNS).map(([key, value]) => ({
          value: key,
          label: value.ru
        })),
        default: [],
        dependent: {
          param: 'signSelection',
          values: ['single', 'multiple']
        }
      },
      {
        name: 'imageType',
        label: '–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
        type: 'select',
        options: [
          { value: 'text', label: '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç' },
          { value: 'image', label: '–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' }
        ],
        default: 'text'
      },
      {
        name: 'carouselMode',
        label: '–†–µ–∂–∏–º –∫–∞—Ä—É—Å–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        type: 'boolean',
        default: true,
        dependent: {
          param: 'imageType',
          values: ['image']
        }
      },
      {
        name: 'addHeader',
        label: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫',
        type: 'boolean',
        default: true
      },
      {
        name: 'header',
        label: '–¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞',
        type: 'text',
        default: 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üîÆ',
        dependent: {
          param: 'addHeader',
          values: [true]
        }
      },
      {
        name: 'addFooter',
        label: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å',
        type: 'boolean',
        default: true
      },
      {
        name: 'footer',
        label: '–¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏',
        type: 'text',
        default: '‚ù§Ô∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –ø–∞–±–ª–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤!',
        dependent: {
          param: 'addFooter',
          values: [true]
        }
      }
    ];
  }

  // Main generation method that will be called from contentGeneratorService
  async generateContent(params) {
    try {
      console.log('Generating horoscope content with params:', params);
      
      // Determine which signs to generate
      let signsToGenerate = [];
      if (params.signSelection === 'all') {
        signsToGenerate = Object.keys(ZODIAC_SIGNS);
      } else if (params.signSelection === 'single' && params.signs && params.signs.length > 0) {
        signsToGenerate = [params.signs[0]]; // First selected sign for 'single' mode
      } else if (params.signSelection === 'multiple' && params.signs && params.signs.length > 0) {
        signsToGenerate = params.signs; // All selected signs for 'multiple' mode
      } else {
        // Default to all signs if selection is invalid
        signsToGenerate = Object.keys(ZODIAC_SIGNS);
      }

      console.log(`Generating horoscopes for signs: ${signsToGenerate.join(', ')}`);

      // Fetch horoscope texts for all selected signs
      const horoscopeData = await this.fetchHoroscopeTexts(signsToGenerate);
      
      // If image type is selected, generate images for each horoscope
      if (params.imageType === 'image') {
        await this.generateHoroscopeImages(horoscopeData);
      }

      // Format the content for VK posting
      return this.formatHoroscopeForPosting(horoscopeData, params);
    } catch (error) {
      console.error('Error generating horoscope content:', error);
      throw new Error(`Failed to generate horoscope: ${error.message}`);
    }
  }

  // Fetch horoscope text for the selected signs
  async fetchHoroscopeTexts(signs) {
    try {
      // In a real implementation, this would fetch from an API or database
      const horoscopes = {};
      
      for (const sign of signs) {
        try {
          const horoscopeData = await this.getHoroscopeForSign(sign);
          horoscopes[sign] = {
            sign,
            signName: ZODIAC_SIGNS[sign].ru,
            text: horoscopeData.text,
            fullText: horoscopeData.fullText,
            date: horoscopeData.date || new Date(),
            imagePath: null // Will be set later if image generation is enabled
          };
        } catch (error) {
          console.error(`Error fetching horoscope for ${sign}:`, error);
          // If one sign fails, continue with others
          horoscopes[sign] = {
            sign,
            signName: ZODIAC_SIGNS[sign].ru,
            text: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ ${ZODIAC_SIGNS[sign].ru}.`,
            fullText: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ ${ZODIAC_SIGNS[sign].ru}.`,
            date: new Date(),
            imagePath: null
          };
        }
      }
      
      return horoscopes;
    } catch (error) {
      console.error('Error fetching horoscope texts:', error);
      throw error;
    }
  }

  // Get horoscope for a specific sign
  async getHoroscopeForSign(sign) {
    try {
      // Use our JavaScript bridge instead of Python
      const horoscopeData = await pythonBridge.fetchHoroscopeText(sign);
      
      return {
        text: horoscopeData.text,
        fullText: horoscopeData.full_text,
        date: new Date(horoscopeData.date)
      };
    } catch (error) {
      console.error(`Error getting horoscope for sign ${sign}:`, error);
      throw error;
    }
  }

  // Generate images for horoscopes if needed
  async generateHoroscopeImages(horoscopeData) {
    try {
      // Create temp directory for images if it doesn't exist
      const tempDir = path.join(os.tmpdir(), 'horoscope-images');
      try {
        await fs.mkdir(tempDir, { recursive: true });
      } catch (err) {
        if (err.code !== 'EEXIST') throw err;
      }

      // For each horoscope, generate an image using our JavaScript implementation
      for (const sign in horoscopeData) {
        const horoscope = horoscopeData[sign];
        const imagePath = path.join(tempDir, `${sign.toLowerCase()}_horoscope.png`);
        
        try {
          // Generate image and save to file
          const imageBuffer = await pythonBridge.generateHoroscopeImage(sign, horoscope.fullText);
          await fs.writeFile(imagePath, imageBuffer);
          horoscope.imagePath = imagePath;
          console.log(`Generated horoscope image for ${sign} at ${imagePath}`);
        } catch (error) {
          console.error(`Error generating image for ${sign}:`, error);
          // Continue without image if generation fails
        }
      }
    } catch (error) {
      console.error('Error generating horoscope images:', error);
      // Continue without images if generation fails
    }
  }

  // Format horoscope data for VK posting
  formatHoroscopeForPosting(horoscopeData, params) {
    try {
      // Create post content based on params
      let postText = '';
      const attachments = [];
      
      // Add header if requested
      if (params.addHeader && params.header) {
        postText += params.header + '\n\n';
      }
      
      // Add horoscope text for each sign
      const signs = Object.values(horoscopeData);
      for (let i = 0; i < signs.length; i++) {
        const horoscope = signs[i];
        
        // Add sign name and text
        postText += `üîÆ ${horoscope.signName} (${this.formatDate(horoscope.date)})\n${horoscope.fullText}\n\n`;
        
        // Add image attachment if any
        if (params.imageType === 'image' && horoscope.imagePath) {
          attachments.push({
            type: 'photo',
            url: horoscope.imagePath, // Local path to image
            isCarousel: params.carouselMode
          });
        }
      }
      
      // Add footer if requested
      if (params.addFooter && params.footer) {
        postText += params.footer;
      }
      
      return {
        text: postText,
        attachments: attachments.length > 0 ? attachments : undefined,
        isCarousel: params.imageType === 'image' && params.carouselMode && attachments.length > 1
      };
    } catch (error) {
      console.error('Error formatting horoscope for posting:', error);
      throw error;
    }
  }

  // Helper method to format date
  formatDate(date) {
    try {
      const d = new Date(date);
      return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;
    } catch (error) {
      return '—Å–∫–æ—Ä–æ';
    }
  }
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
console.log('Loading horoscope generator...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
const generator = new HoroscopeGenerator();
console.log('Horoscope generator initialized with id:', generator.id);

module.exports = generator;
